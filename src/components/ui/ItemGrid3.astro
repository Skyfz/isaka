---
//import { Icon } from "astro-icon/components";
import { twMerge } from "tailwind-merge";
import type { ItemGrid } from "~/types";
import Button from "./Button.astro";
import Image from '~/components/common/Image.astro';


const {
  items = [],
  columns,
  defaultIcon = "",
  classes = {},
} = Astro.props as ItemGrid;

const {
  container: containerClass = "sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3",
  panel: panelClass = "",
  title: titleClass = "",
  description: descriptionClass = "",
} = classes;
---
{
    items && (
      <div
        class={twMerge(
          `grid gap-8 gap-x-12 sm:gap-y-8 ${
            columns === 4
              ? "lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2"
              : columns === 3
              ? "lg:grid-cols-3 sm:grid-cols-1"
              : columns === 2
              ? "sm:grid-cols-2 "
              : ""
          }`,
          containerClass
        )}
      >
        {items.map(
          ({
            title,
            description,
            icon,
            callToAction,
            classes: itemClasses = {},
          }) => (
            <div
              data-aos="fade-up"
              class={twMerge(
                "justify-self-center flex-initial w-80",
                panelClass,
                itemClasses?.panel
              )}
            >
            {(icon || defaultIcon) && (
              <div class="flex justify-center">
                {/* Replace the <Icon> component with an <Image> component or an <img> tag */}
                <Image
                  src= {icon}
                  width={100}
                  height={60}
                  alt= {description}
                  class={twMerge(
                    "mb-4 rounded-lg bg-transparent",
                    itemClasses?.icon
                  )}
                />
              </div>
            )}
  
              <div
                class={twMerge(
                  "text-xl font-bold text-center",
                  titleClass,
                  itemClasses?.title
                )}
              >
                {title}
              </div>
              {description && (
                <p
                  class={twMerge(
                    "text-muted mt-1 text-center",
                    descriptionClass,
                    itemClasses?.description
                  )}
                  set:html={description}
                />
              )}
              {callToAction && (
                <div class="mt-2">
                  <Button {...callToAction} />
                </div>
              )}
            </div>
          )
        )}
      </div>
    )
  }
  
